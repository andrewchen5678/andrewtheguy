---
title: Home - Andrew Chen's Website
page_id: home
---
    <header class="jumbotron">
      <div class="header-container default-row">
          <div class="header-inner inner-wrapper-full">
          <!--<video preload="auto" loop="loop" class="blk-video" autoplay="autoplay" poster="/images/nyc_traffic.jpg" id="bgvid">
              <source src="//s3.amazonaws.com/andrewtheguy/videos/nyc_traffic.mp4" type="video/mp4">
              <source src="//s3.amazonaws.com/andrewtheguy/videos/nyc_traffic.webm" type="video/webm">
          </video>-->
        <h1>Hello, I am <strong>Andrew Chen</strong>!</h1>
        <p>Ninja coder, classical music lover, special food maker.</p>
        <p><!--<a class="btn btn-primary btn-lg" href="#" role="button">Learn more &raquo;</a>-->
        <a class="webicon twitter" href="#">Twitter</a>
        <a class="webicon googleplus" href="#">Google+</a>
        <a class="webicon linkedin" href="#">LinkedIn</a>
        <a class="webicon github" href="#">GitHub</a>
        <a class="webicon stackoverflow" href="#">Stack Overflow</a>
        </p>
          </div>
      </div>
    </header>

    <div class="home-about-list default-row">
      
        <section class="home-about-item">
          <h2><img src="<%=image_path 'code-heading.svg' %>" class="heading-icon" alt="Ninja Coder"></h2>
          <p>My years of programming with open-source technology have taking me along the lines of learning Java in college, to PHP as a CMS hacker with the LAMP stack and now to Ruby and Rails and Responsive Front-End Web Development. I am also a Linux enthusiast and I like to set up Linux for servers and hacking Linux to make it work as well. </p>
          <!--<p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>-->
        </section>
        <section class="home-about-item">
          <h2><img src="<%=image_path 'beethoven-circle.svg' %>" class="heading-icon" alt="Classical Music Lover"></h2>
          <p>I am also an avid classical music listener. My interest of classical music started after the music appreciation class in college. I listen to classical music from the Baroque period all the way to the Romantic period. I like particularly musical compositions by Bach and Beethoven. One of the reasons I like classical music is because it is natural music played by natural instruments. </p>
          <!--<p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>-->
       </section>
        <section class="home-about-item">
          <h2><img src="<%=image_path 'circle-chef-hat.svg' %>" class="heading-icon" alt="Special Food Maker"></h2>
          <p>Besides classical music, I also enjoy cooking special foods especially oven baked ones with natural ingredients&#128523;&#127860;. I make yeast leavened bread&#127838; and pastries such as flan, lemon meringue pie, apple pie, and others. I just like homemade food with natural ingredients. </p>
          <!--<p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>-->
        </section>
      </div>
      <!--<div class="twitter-section">
          
            <a class="twitter-timeline" href="https://twitter.com/andrewchen5678" data-widget-id="635836045154631681">Tweets by @andrewchen5678</a>
            <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
          
      </div>--><!-- twitter widget kinda sucks when comes to customization, and I don't want to spin up a backend api to make my own widget -->
<!-- considering using https://github.com/jasonmayes/Twitter-Post-Fetcher as a workaround -->
    
    <% content_for :page_scripts do %>
<!-- not a typo, because it is NOT USED, might remove later -->
    <script type="text/plain">
/**
 * code from http://codepen.io/trhino/pen/JFmiK
 * Generates random particles using canvas
 * 
 * @class Particles
 * @constructor
 */
function Particles(){
  //particle colors
  this.colors = [
    '255, 255, 255',
    '255, 99, 71',
    '19, 19, 19'
  ];
  //adds gradient to particles on true
  this.blurry = true;
  //adds white border
  this.border = false;
  //particle radius min/max
  this.minRadius = 10; 
  this.maxRadius = 35;
  //particle opacity min/max
  this.minOpacity = .005;
  this.maxOpacity = .5;
  //particle speed min/max
  this.minSpeed = .05;
  this.maxSpeed = .5;
  //frames per second 
  this.fps = 60;
  //number of particles
  this.numParticles = 75;
  //required canvas variables
  //console.log('init!!!',this);
  this.canvas = document.getElementById('bg-canvas');
  //console.log(this.canvas);
  this.ctx = this.canvas.getContext('2d');
}

/**
 * Initializes everything
 * @method init
 */
Particles.prototype.init = function(){
  this.render();
  this.createCircle();
};

/**
 * generates random number between min and max values
 * @param  {number} min value
 * @param  {number} max malue
 * @return {number} random number between min and max
 * @method _rand
 */
Particles.prototype._rand = function(min, max){
  return Math.random() * (max - min) + min;
};

/**
 * Sets canvas size and updates values on resize
 * @method render
 */
Particles.prototype.render = function(){ 
  /*
  var self = this,
      wHeight = $(window).height(),
      wWidth = $(window).width();
  
  self.canvas.width = wWidth;
  self.canvas.height = wHeight;
  */
  //$(window).on('resize', self.render);
};

/**
 * Randomly creates particle attributes
 * @method createCircle
 */
Particles.prototype.createCircle = function(){
  var particle = [];

  for (var i = 0; i < this.numParticles; i++) {
    var self = this,
        color = self.colors[~~(self._rand(0, self.colors.length))];
    //console.log('for this!!!',this);
    particle[i] = {
      radius    : self._rand(self.minRadius, self.maxRadius),
      xPos      : self._rand(0, this.canvas.width),
      yPos      : self._rand(0, this.canvas.height),
      xVelocity : self._rand(self.minSpeed, self.maxSpeed),
      yVelocity : self._rand(self.minSpeed, self.maxSpeed),
      color     : 'rgba(' + color + ',' + self._rand(self.minOpacity, self.maxOpacity) + ')'
    };
    
    //once values are determined, draw particle on canvas
    self.draw(particle, i);
  }
  //...and once drawn, animate the particle
  self.animate(particle);
};

/**
 * Draws particles on canvas
 * @param  {array} Particle array from createCircle method
 * @param  {number} i value from createCircle method
 * @method draw
 */
Particles.prototype.draw = function(particle, i){
  var self = this,
      ctx = self.ctx;
  
  if (self.blurry === true ) {
    //creates gradient if blurry === true
    var grd = ctx.createRadialGradient(particle[i].xPos, particle[i].yPos, particle[i].radius, particle[i].xPos, particle[i].yPos, particle[i].radius/1.25);
    
    grd.addColorStop(1.000, particle[i].color);
    grd.addColorStop(0.000, 'rgba(34, 34, 34, 0)');
    ctx.fillStyle = grd;
  } else {
    //otherwise sets to solid color w/ opacity value
    ctx.fillStyle = particle[i].color; 
  }
  
  if (self.border === true) {
    ctx.strokeStyle = '#fff';
    ctx.stroke();
  }
  
  ctx.beginPath();
  ctx.arc(particle[i].xPos, particle[i].yPos, particle[i].radius, 0, 2 * Math.PI, false);
  ctx.fill();
};

/**
 * Animates particles 
 * @param  {array} particle value from createCircle & draw methods
 * @method animate
 */
Particles.prototype.animate = function(particle){
  var self = this,
          ctx = self.ctx;
  
  setInterval(function(){
    //clears canvas
    self.clearCanvas();
    //then redraws particles in new positions based on velocity
    for (var i = 0; i < self.numParticles; i++) {
      particle[i].xPos += particle[i].xVelocity;
      particle[i].yPos -= particle[i].yVelocity;
     
      //if particle goes off screen call reset method to place it offscreen to the left/bottom
      if (particle[i].xPos > self.canvas.width + particle[i].radius || particle[i].yPos > self.canvas.height + particle[i].radius) {
        self.resetParticle(particle, i);
      } else {
        self.draw(particle, i);
      }
    }  
  }, 1000/self.fps); 
};

/**
 * Resets position of particle when it goes off screen
 * @param  {array} particle value from createCircle & draw methods
 * @param  {number} i value from createCircle method
 * @method resetParticle
 */
Particles.prototype.resetParticle = function(particle, i){
  var self = this;
  
  var random = self._rand(0, 1);
  
  if (random > .5) { 
    // 50% chance particle comes from left side of window...
    particle[i].xPos = -particle[i].radius;
    particle[i].yPos = self._rand(0, this.canvas.height);
  } else {
    //... or bottom of window
    particle[i].xPos = self._rand(0, this.canvas.width);
    particle[i].yPos = this.canvas.height + particle[i].radius;   
  }
  //redraw particle with new values
  self.draw(particle, i);
};

/**
 * Clears canvas between animation frames
 * @method clearCanvas
 */
Particles.prototype.clearCanvas = function(){
  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
};

//$(function(){
// go go go!
var particle = new Particles().init(); 
//});
    </script>
    <% end %>